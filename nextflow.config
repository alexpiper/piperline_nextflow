/*
 * -------------------------------------------------
 *  Piperline Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
// Some help with time stamps
import java.text.SimpleDateFormat

params {
    // Configurable variables
    clusterOptions = ''
    project = false
    email = false
    plaintext_email = false
    lengthvar = false

    // Show help emssage
    help = false
    name = false
    base = "basc"
    version = 0.1 //pipeline version
    
    // Pipeline Options
    reads = ""
    read_format = "fcid_sampleid_ext_pcr_S_R_L.fastq.gz"
    samplesheet = false
    runparam = false
    interop = false
    timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
    outdir = "./" + timestamp + "-piperline"
    
    // Switching calculation
    calc_switchrate = true

    // Filter & Trimming
    trimFor = 0
    trimRev = 0
    truncFor = 0
    truncRev = 0
    maxEEFor = 2
    maxEERev = 2
    truncQ = 2 //default
    maxN = 0 //default
    maxLen = "Inf" // default, this can be coersed in R using as.numeric
    minLen = 50 // default
    matchIDs = "T"
    rmPhiX = "T"  // TODO: test using true instead of string
    
    // ASV Inference (DADA2)
    errbases = 1e+08
    errfun = "loessErrfun"
    qualityBinning = false  // false, set to true if using binned qualities (NovaSeq)
    pool = "pseudo" // TODO: test using false instead of string
    
    // Read Merging
    minOverlap = 20 // default=12
    maxMismatch = 0 // default
    trimOverhang = "F"
    justConcatenate = "F"  // TODO: test using false instead of string
    dadaOpt = []
    // Renaming

    // ASV Filtering
    coding = true
    genetic_code = "SGC4" // invertebrate mitochondrial
    phmm = ""
    min_asv_len = 0 // only runs if > 0
    max_asv_len = 0 // only runs if > 0
    removeBimeraDenovoOptions = false

    // Taxonomic assignment
    taxassignment = 'idtaxa' // default: RDP classifier implementation in dada2
    reference = false
    species = false
    blastdb = false
    minBoot = 50 // default for dada2
    taxLevels = false

    // Alignment & Phylogenetic analysis
    aligner = 'DECIPHER' // default
    runTree = 'fasttree' // default, current alternative is 'phangorn'

    // MultiQC
    interactiveMultiQC = false
    
    // Sample filtering
    min_sample_reads = 1000
    
    // Taxon filtering
    phylum = ""
    order = ""
    family = ""
    genus = ""
    species = ""
    
    // outputs
    check_ala = true
    check_afd = true
    
	// Testing
	subsample = ""

    // Quick hack to clean up sample names, probably unsafe (bobby tables);
    // this would work better with a mapping table
    sampleRegex = false
    idType = "simple"
}

profiles {

  standard {
        includeConfig 'conf/standard.config'
  }
  basc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/basc.config'
  }
   none {
    // Don't load any config (for use with custom home configs)
  }

}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/piperline_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/piperline_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/piperline_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/piperline_DAG.svg"
}

manifest {
  homePage = 'https://github.com/alexpiper/piperline'
  description = 'Piperline metabarcoding analysis pipeline for AgVic'
  defaultBranch = 'main'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
