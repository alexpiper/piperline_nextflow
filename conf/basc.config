/*
 * -------------------------------------------------
 *  Nextflow config file with environment modules for Agriculture Victoria BASC cluster
 * -------------------------------------------------
 */

base = 'basc'
params {
  config_profile_description = 'Agriculture Victoria BASC profile'
  config_profile_contact = 'Alexander Piper (@alexpiper)'
  config_profile_url = 'https://www.agribio.com.au/'
  max_memory = 240.GB
  max_cpus = 48
  max_time = 240.h
}

executor {
    name = 'slurm'
    queueSize = 128
}

process {
    // Global process config
	//beforeScript = 'source ~/nf/bin/activate; module load charliecloud/0.23-GCCcore-9.3.0'	
    executor = 'slurm'
    
    // This sets nf to use a tmpdir to share files between processes
    //process.scratch = true
    
    // TODO: Fix the clusteroptions
	// clusterOptions = { "-A $params.project ${params.clusterOptions ?: ''}" } 

    // NB: Overwrite this in a config file in the working directory (nextflow.config) or with -c

    // Environment modules and resource requirements
    // TODO: syntax will need to be changed for Nextflow 0.31.0 and higher:
    // https://www.nextflow.io/docs/latest/config.html#process-selectors

	// setup & validation
	withName:validate_reads {
        module = ['seqtk/1.3-GCC-8.2.0-2.31.1', 'pigz/2.4-GCCcore-8.2.0']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:create_samdf {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    
    // Index switch calculation
    withName:summarise_index {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:index_calc {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = 24.GB
    }
    
    // Trimming, filtering, QC
    withName:fastqc {
        module = ['FastQC/0.11.8-Java-1.8']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:multiqc {
        module = ['MultiQC/1.9-foss-2020a-Python-3.8.2']
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:nfilter {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }
	withName:cutadapt {
        module = ['cutadapt/3.4-GCCcore-10.3.0']
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = 4.GB
    }
	withName:cutadapt_var {
        module = ['cutadapt/3.4-GCCcore-10.3.0']
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:filter_and_trim {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:fastqc_filtered {
        module = ['FastQC/0.11.8-Java-1.8']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:multiqc_filtered {
        module = ['MultiQC/1.9-foss-2020a-Python-3.8.2']
        cpus = { check_max(4 * task.attempt, 'cpus') }
        memory = 4.GB
    }
    withName:merge_trimmed_table {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 4.GB
    }

    // DADA2
    withName:dada2_learn_errors {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 12.GB
    }
    withName:dada2_persample {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = 24.GB
    }
    withName:dada2_pooled {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 72.GB
    }

    // ASV Filtering
    withName:coding_asv_filter {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 12.GB
    }
    withName:noncoding_asv_filter {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = 12.GB
    }
    
    // Taxonomic assignment
    withName:assign_tax_rdp {
        module = ['R/4.1.0-foss-2021a']
        cpus = 12
        memory = 48.GB
    }
    withName:assign_tax_idtaxa {
        module = ['R/4.1.0-foss-2021a', 'BLAST+/2.11.0-gompi-2020a']
        cpus = 12
        memory = 48.GB
    }    
    
    // Phylogenetics
    withName:output_asvs {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = 12.GB
    }
    withName:align_seqs_decipher {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 48.GB
    }
    withName:make_tree_phangorn {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 48.GB
    }
    withName:make_tree_fasttree {
        module = ['FastTree/2.1.11-GCCcore-9.3.0']
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = 48.GB
    }
    withName:root_tree {
        module = ['R/4.1.0-foss-2021a']
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = 12.GB
    }

    // Read tracking
    withName:merge_dada_rds {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:track_reads {
        module = ['R/4.1.0-foss-2021a']
    }
    
    // Outputs
    withName:make_phyloseq {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:filter_phyloseq {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:output_unfiltered {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:output_filtered {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:make_seqtab {
        module = ['R/4.1.0-foss-2021a']
    }

    // Taxa checks
    withName:check_ala {
        module = ['R/4.1.0-foss-2021a']
    }
    withName:check_afd {
        module = ['R/4.1.0-foss-2021a']
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}